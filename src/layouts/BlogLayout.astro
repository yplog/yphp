---
import { Image } from "astro:assets";
import MarkdownStyles from "../styles/markdown.astro";
import { formatLocaleDate } from "../helpers/date";
import Header from "../components/Header.astro";
import Divider from "../components/Divider.astro";
import Footer from "../components/Footer.astro";

interface Props {
  title: string;
  description: string;
  pubDate: string;
  image?: {
    src: string;
    alt: string;
    createdBy?: string;
    creatorLink?: string;
  };
  tags?: string[];
}

const { title, description, pubDate, image, tags } = Astro.props as Props;

const formattedPubDate = formatLocaleDate(new Date(pubDate));
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="yp's home page" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/png" href="/favicon.png" />
    <meta name="generator" content={Astro.generator} />
    <meta name="fediverse:creator" content="@yplog@fosstodon.org" />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="article" />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:site_name" content="yp's blog" />
    {
      image && (
        <meta property="og:image" content={new URL(image.src, Astro.site)} />
      )
    }
    {image && <meta property="og:image:alt" content={image.alt} />}
    <meta property="article:published_time" content={pubDate} />
    {tags && tags.map((tag) => <meta property="article:tag" content={tag} />)}

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    {
      image && (
        <meta
          property="twitter:image"
          content={new URL(image.src, Astro.site)}
        />
      )
    }

    <title>{title}</title>
  </head>
  <body class="flex flex-col min-h-screen max-w-3xl m-auto bg-dark-bg">
    <Header />
    <Divider isHeader={true} />

    <main class="flex-grow markdown-content">
      {
        image && (
          <>
            <Image
              src={image.src}
              width="1200"
              height="675"
              alt={image.alt}
              format="webp"
              decoding="async"
              loading="lazy"
              class="post-header-image"
            />
            {image?.createdBy && image.creatorLink && (
              <p class="text-gray-400 text-sm text-center">
                Image by:{" "}
                <a
                  href={image.creatorLink}
                  target="_blank"
                  class="text-h2-text hover:underline italic"
                >
                  {image.createdBy}
                </a>
              </p>
            )}
          </>
        )
      }

      <div class="post-header mb-8">
        <h1 class="text-4xl font-bold text-h1-text mb-4">{title}</h1>
        <p class="text-gray-400 mb-2">Published on: {formattedPubDate}</p>
        <p class="text-xl text-h2-text italic">{description}</p>
      </div>

      <slot />

      {
        tags && tags.length > 0 && (
          <div class="mt-4">
            <span class="text-gray-400">Tags: </span>
            {tags.map((tag: string) => (
              <span class="text-gray-300 py-1 text-sm"> #{tag}</span>
            ))}
          </div>
        )
      }
    </main>

    <Divider />
    <Footer />
    <MarkdownStyles />

    <!-- Prism.js for syntax highlighting -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-dark.min.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-core.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/autoloader/prism-autoloader.min.js"></script>

    <script type="module">
      import mermaid from "https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs";

      if (document.getElementsByClassName("mermaid").length > 0) {
        mermaid.initialize({ startOnLoad: true, theme: "dark" });
      }
      
      // Initialize Prism.js
      if (typeof Prism !== 'undefined') {
        Prism.highlightAll();
      }
    </script>
  </body>
</html>
